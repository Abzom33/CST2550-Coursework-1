#include <iostream>

#include <vector>

#include <ctime>

#include <string>

#include <algorithm>

#include <fstream>

#include <sstream>

#include <iomanip>

class Date;

class Book;

class Member;

class Library {
        public: std::vector < Book > books;

        void loadBooksFromCSV(const std::string & filename);
};

class Person {
        public: std::string name;
        std::string address;
        std::string email;

        std::string getName() const {
                return name;
        }

        void setName(const std::string & newName) {
                name = newName;
        }

        std::string getAddress() const {
                return address;
        }

        void setAddress(const std::string & newAddress) {
                address = newAddress;
        }

        std::string getEmail() const {
                return email;
        }

        void setEmail(const std::string & newEmail) {
                email = newEmail;
        }
};

class Date {
        public: int year;
        int month;
        int day;

        bool operator < (const Date & other) const {
                if (year != other.year) {
                        return year < other.year;
                }
                if (month != other.month) {
                        return month < other.month;
                }
                return day < other.day;
        }
};

class Book {
        public: int BookID;
        std::string BookName;
        std::string authorFirstName;
        std::string authorLastName;
        std::string BookType;
        Date dueDate;

        std::string getBookID() const {
                return std::to_string(BookID);
        }

        std::string getBookName() const {
                return BookName;
        }

        std::string getAuthorFirstName() const {
                return authorFirstName;
        }

        std::string getAuthorLastName() const {
                return authorLastName;
        }

        void borrowBook(Member & borrower, Date & dueDate);
};

class Member: public Person {
        private: int MemberId;
        std::vector < Book * > BooksLoaned;

        public: Member(int memberId,
                const std::string & name,
                        const std::string & address,
                                const std::string & email): MemberId(memberId) {
                setName(name);
                setAddress(address);
                setEmail(email);
        }

        int getMemberId() const {
                return MemberId;
        }

        std::vector < Book * > getBorrowed() const {
                return BooksLoaned;
        }

        void setBooksBorrowed(std::vector < Book * > & LoanedBooks);

        void displayBorrowedBooks() const {
                std::cout << "Books borrowed by Member " << MemberId << ":\n";
                for (const auto & book: BooksLoaned) {
                        std::cout << "Book ID " << book -> getBookID() << "-" << book -> getBookName() << "\n";
                }
        }

        void IssueBook(Book * book) {
                BooksLoaned.push_back(book);
        }

        void ReturnBook(Book * book) {
                auto it = std::find(BooksLoaned.begin(), BooksLoaned.end(), book);
                if (it != BooksLoaned.end()) {
                        BooksLoaned.erase(it);
                        std::cout << "Book returned successfully\n";
                } else {
                        std::cout << "Book not found in the borrowed list\n";
                }
        }

        int CalcFine() const {
                int fine = 0;
                std::time_t currentDate;
                std::time( & currentDate);

                for (const auto & book: BooksLoaned) {
                        std::tm dueDateTm = {};
                        dueDateTm.tm_year = book -> dueDate.year - 1900;
                        dueDateTm.tm_mon = book -> dueDate.month - 1;
                        dueDateTm.tm_mday = book -> dueDate.day;

                        std::time_t dueDateInSeconds = std::mktime( & dueDateTm);

                        if (dueDateInSeconds != -1) {
                                if (dueDateInSeconds < currentDate) {
                                        int daysOverdue = static_cast < int > ((currentDate - dueDateInSeconds) / (24 * 60 * 60));
                                        fine += daysOverdue * 1;
                                }
                        } else {
                                std::cerr << "Error converting dueDate to time_t\n";
                        }
                }
                return fine;
        }
};

class Librarian: public Person {
        private: int StaffId;
        int Salary;
        std::vector < Book > books;

        public: void loadBooksFromCSV(const std::string & filename);

        Librarian(int staffId,
                const std::string & name,
                        const std::string & address,
                                const std::string & email, int salary): StaffId(staffId),
        Salary(salary) {
                setName(name);
                setAddress(address);
                setEmail(email);
        }

        void addMember(std::vector < Member > & members);

        void IssueBook(Member & member, Book & book);

        void ReturnBook(Member & member, Book & book);

        void displayBorrowedBooks(const Member & member) const;

        void CalcFine(Member & member);

        int getStaff() const {
                return StaffId;
        }

        int getStaffID() const {
                return StaffId;
        }

        int getSalary() const {
                return Salary;
        }
};

void Book::borrowBook(Member & borrower, Date & dueDate) {
        Member & currentBorrower = borrower;
        std::cout << "Book borrowed by: " << currentBorrower.getName() << std::endl;
        this -> dueDate = dueDate;
}

void Librarian::addMember(std::vector < Member > & members) {
        int memberId, booksBorrowed;
        std::string name, address, email;

        std::cout << "Enter member ID: ";
        std::cin >> memberId;
        std::cout << "Enter name: ";
        std::getline(std::cin >> std::ws, name);
        std::cout << "Enter address: ";
        std::getline(std::cin >> std::ws, address);
        std::cout << "Enter email: ";
        std::cin >> email;
        std::cout << "Enter number of books borrowed: ";
        std::cin >> booksBorrowed;

        Member newMember(memberId, name, address, email);
        members.push_back(newMember);

        std::cout << "Member added successfully\n";
}

void Librarian::IssueBook(Member & member, Book & book) {
        Date dueDate;
        std::cout << "Enter due date (YYYY MM DD): ";
        std::cin >> dueDate.year >> dueDate.month >> dueDate.day;

        book.borrowBook(member, dueDate);
        member.IssueBook( & book);

        std::cout << "Book issued successfully\n";
}

void Librarian::ReturnBook(Member & member, Book & book) {
        member.ReturnBook( & book);
        book.dueDate = {};
        std::cout << "Book returned successfully\n";
}

void Librarian::displayBorrowedBooks(const Member & member) const {
        member.displayBorrowedBooks();
}

void Librarian::CalcFine(Member & member) {
        int fine = member.CalcFine();
        std::cout << "Fine: " << fine << std::endl;
}

void Library::loadBooksFromCSV(const std::string & filename) {
        std::ifstream file(filename);
        if (!file.is_open()) {
                std::cerr << "Error opening file: " << filename << std::endl;
                return;
        }

        books.clear(); // Clear existing books before loading

        std::string line;
        while (std::getline(file, line)) {
                std::istringstream iss(line);
                Book book;
                std::string temp;
                iss >> book.BookID >> std::ws;

                // Read the BookName by considering the entire line
                std::getline(iss, temp, ',');
                std::getline(iss, book.BookName, ',');

                iss >> book.authorFirstName >> book.authorLastName >> std::quoted(book.BookType);

                books.push_back(book);
        }

        file.close();
        std::cout << "Books loaded successfully from CSV!" << std::endl;
}

int main() {
        std::vector < Member > members;
        Library library;
        library.loadBooksFromCSV("books.csv");
        Librarian librarian(1, "John Doe", "Library St.", "john@example.com", 50000);

        int choice;
        do {
                std::cout << "Library System\n";
                std::cout << "1. Add Member\n";
                std::cout << "2. Display Books borrowed by member\n";
                std::cout << "3. Issue Book\n";
                std::cout << "4. Return Book\n";
                std::cout << "5. Calculate Fine\n";
                std::cout << "6. Exit\n";
                std::cout << "Enter option: ";
                std::cin >> choice;

                switch (choice) {
                case 1:
                        librarian.addMember(members);
                        break;
                case 2: {
                        int MemberId; // Declare MemberId here
                        std::cout << "Enter Member ID to display books: ";
                        std::cin >> MemberId;

                        // Find the Member corresponding to MemberId
                        auto memberIt = std::find_if(members.begin(), members.end(),
                                [MemberId](const Member & m) {
                                        return m.getMemberId() == MemberId;
                                });

                        if (memberIt != members.end()) {
                                librarian.displayBorrowedBooks( * memberIt);
                        } else {
                                std::cout << "Member not found.\n";
                        }
                        break;
                }

                case 3:
                        if (!members.empty() && !library.books.empty()) {
                                int memberId, bookId;
                                std::cout << "Enter member ID: ";
                                std::cin >> memberId;
                                std::cout << "Enter book ID: ";
                                std::cin >> bookId;

                                auto memberIt = std::find_if(members.begin(), members.end(),
                                        [memberId](const Member & m) {
                                                return m.getMemberId() == memberId;
                                        });
                                auto bookIt = std::find_if(library.books.begin(), library.books.end(),
                                        [bookId](const Book & b) {
                                                return b.getBookID() == std::to_string(bookId);
                                        });

                                if (memberIt != members.end() && bookIt != library.books.end()) {
                                        librarian.IssueBook( * memberIt, * bookIt);
                                } else {
                                        std::cout << "Invalid member ID or book ID.\n";
                                }
                        } else {
                                std::cout << "No members or books available.\n";
                        }
                        break;

                case 4:
                        if (!members.empty() && !library.books.empty()) {
                                int memberId, bookId;
                                std::cout << "Enter member ID: ";
                                std::cin >> memberId;
                                std::cout << "Enter book ID: ";
                                std::cin >> bookId;

                                auto memberIt = std::find_if(members.begin(), members.end(),
                                        [memberId](const Member & m) {
                                                return m.getMemberId() == memberId;
                                        });
                                auto bookIt = std::find_if(library.books.begin(), library.books.end(),
                                        [bookId](const Book & b) {
                                                return b.getBookID() == std::to_string(bookId);
                                        });

                                if (memberIt != members.end() && bookIt != library.books.end()) {
                                        librarian.ReturnBook( * memberIt, * bookIt);
                                } else {
                                        std::cout << "Invalid member ID or book ID.\n";
                                }
                        } else {
                                std::cout << "No members or books available.\n";
                        }
                        break;

                case 5:
                        if (!members.empty()) {
                                int memberId;
                                std::cout << "Enter member ID: ";
                                std::cin >> memberId;

                                auto memberIt = std::find_if(members.begin(), members.end(),
                                        [memberId](const Member & m) {
                                                return m.getMemberId() == memberId;
                                        });

                                if (memberIt != members.end()) {
                                        librarian.CalcFine( * memberIt);
                                } else {
                                        std::cout << "Member not found.\n";
                                }
                        } else {
                                std::cout << "No members available.\n";
                        }
                        break;

                case 6:
                        std::cout << "Exiting program.\n";
                        break;

                default:
                        std::cout << "Invalid choice. Please try again.\n";
                }
        } while (choice != 6);

        return 0;
}
